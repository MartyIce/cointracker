  <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
  <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-dateFormat/1.0/jquery.dateFormat.js"></script>
<script>

var map;
var currentMap = "mapCurrentCoin";
var marker;
var allMarkers = [];
var flightPath;
var flightPlanCoords = [];
var currentEntries = [];

function initMap() {
  var latlng = new google.maps.LatLng(37.09024, -95.712891);
  map = new google.maps.Map(document.getElementById('map-canvas'), {
    zoom: 3,
    center: latlng,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });
}
function update_geo(coin_entries) {
  coin_entries.forEach(function(coin_entry) {
    var coords = {lat: coin_entry.lat, lng: coin_entry.lng};
    flightPlanCoords.push(coords);
    createMarker(coin_entry, coords, map, coin_entry.city)
  });
  updateFlightPath();
}

function markerSelected(marker) {

  allMarkers.forEach(function(m) {
    m.setAnimation(null);
  });
  marker.setAnimation(google.maps.Animation.BOUNCE);

  $('.cityname').css('color', 'black');
  var classname = getEntryClassname(marker.coin_entry);
  $('.' + classname).css('color', 'blue');
}

function createMarker(coin_entry, coords, map, label){
  marker = new google.maps.Marker({
    position: coords,
    map: map,
    label: label
  });
  marker.coords = coords;
  marker.coin_entry = coin_entry
  allMarkers.push(marker);

  marker.addListener('click', function() {
    markerSelected(this);
  });
}

// Removes the markers from the map, but keeps them in the array.
function clearMarkers() {
  allMarkers.forEach(function(m) {
    m.setMap(null);
  });
  flightPlanCoords = [];
}

// Deletes all markers in the array by removing references to them.
function deleteMarkers() {
  clearMarkers();
  allMarkers = [];
}
function findMatchingMarkersByClassname(classname) {
  var match = allMarkers.filter(function (entry) 
    { 
      return classname === getEntryClassname(entry.coin_entry); 
    }
  );
  return match;
}
function findMatchingMarker(currentEntry) {
  var match = allMarkers.filter(function (entry) 
    { 
      var ce1 = entry.coin_entry;
      var ce2 = currentEntry;
      if(ce1.city && ce1.state) {
        var c1 = ce1.city.toUpperCase();
        var c2 = ce2.city.toUpperCase();
        var s1 = ce1.state.toUpperCase();
        var s2 = ce2.state.toUpperCase();
        return c1 === c2 && s1 === s2; 
      }
      else
        return false;
    }
  );
  if(match.length > 0)
    return match[0];
  else
    return null;
}
function getEntryClassname(entry) {
  var classname = entry.city
  if(classname && classname.length > 0 && entry.state.length > 0)
    classname += '_' + entry.state;
  if(classname)
    return classname.replace(' ', '_').toUpperCase();
  else
    return null;
}
function highlightMarker(classname) {
  allMarkers.forEach(function(m) {
    m.setAnimation(null);
  });
  var markers = findMatchingMarkersByClassname(classname);
  if(markers.length > 0)
    markerSelected(markers[0])
}
function update_entries(data) {

  currentEntries = data;
  clearMarkers();
  if(flightPath)
    flightPath.setMap(null);

  var table = $('<table></table>');
  var citiesToRetrieve = [];
  for(i=0; i<currentEntries.length; i++){
      var currentEntry = currentEntries[i];

      var location = currentEntry.city;
      if(location.length > 0 && currentEntry.state.length > 0)
        location += ', ' + currentEntry.state;

      var classname = getEntryClassname(currentEntry);

      switch(currentMap) {
        case "mapCurrentCoin":
          table.append( '<tr ' +
            'onclick="highlightMarker(\'' + 
            classname + 
            '\')" class="cityname ' + 
            classname + 
            '"><td align="right">' + 
            location +
            ':</td><td>' + 
            $.format.date(currentEntry.created_at, "MM/dd/yyyy") +
            '</td></tr>' );
          break;
        case "mapAllCoins":
          table.append( '<tr ' + 
            'onclick="highlightMarker(\'' + 
            classname + 
            '\')" class="cityname ' + 
            classname + '"><td align="right">' + 
            currentEntry.serial_number +
            ':</td><td>' + 
            $.format.date(currentEntry.created_at, "MM/dd/yyyy") +
            '</td></tr>' );
          table.append( '<tr ' +
            'onclick="highlightMarker(\'' + 
            classname + 
            '\')" class="cityname ' + 
            classname + '"><td align="right"></td><td>' + 
            location +
            '</td></tr>' );
          break;
      }
      var currentMarker = findMatchingMarker(currentEntry);
      if(currentMarker === null)
      {
        var cityToRetrieve = citiesToRetrieve.filter(function (entry) 
          { return entry.city === currentEntry.city && entry.state === currentEntry.state; });
        if(cityToRetrieve.length == 0)
          citiesToRetrieve.push(currentEntry);
      }
      else
      {
        flightPlanCoords.push(currentMarker.coords);
      }

  }
  $('#coin_entries').html(table);

  if(citiesToRetrieve.length > 0)
    $.ajax({
      type: "POST",
      url: "coin_entries/location_update",
      data: { "cities": citiesToRetrieve },
      success: update_geo
    });
  else
    updateFlightPath();

};

function updateFlightPath() {
  if(currentMap === 'mapCurrentCoin')
  {
    flightPath = new google.maps.Polyline({
      path: flightPlanCoords,
      geodesic: false,
      strokeColor: '#FF0000',
      strokeOpacity: 1.0,
      strokeWeight: 2
    });

    flightPath.setMap(map);
    
  }

  switch(currentMap) {
    case "mapCurrentCoin":
    var index = 1;
      allMarkers.forEach(function(m) {
        m.label = '';
      });
      currentEntries.forEach(function(entry) {
      var marker = findMatchingMarker(entry)
      if(marker) {
        if(marker.label === '')
          marker.label = index.toString();
        marker.setMap(map);
        index++;
      }
    });
      break;
    case "mapAllCoins":
      allMarkers.forEach(function(m) {
        m.label = m.coin_entry.city;
        m.setMap(map);
      });
      break;
  }

}

function refreshCities()
{
  $("[name='coin_entry[city]']").val('');
  $("[name='coin_entry[state]']").val('');
  $("[name='coin_entry[description]']").val('');
  window[currentMap]();
  return true;
}

$(document).ready(function () {
  $(".edit_fields :input").attr("disabled", true);
  $("#coin_entry_serial_number").change(refreshCities);
  refreshCities();
  $( "#created_at_picker" ).datepicker();

  $("input[name$='mapSelection']").click(function() {
      currentMap = $(this).val();
      window[currentMap]();
  });
});

function mapCurrentCoin() {
  $("#validation-errors-serial-number").hide();
  var entry = $( "input[id=coin_entry_serial_number]" )[0].value;
  if(entry) {
    var entryInt = parseInt(entry);
    if(entry.length === 3 && entryInt > 0 && entryInt <= 250) {
      $(".edit_fields :input").attr("disabled", false);
      $.ajax({
        type: "GET",
        url: "coin_entries/find_by_serial_number/" + entry,
        success: update_entries
      });
    }
    else {
      $(".edit_fields :input").attr("disabled", true);
      $("#validation-errors-serial-number").show();
      $("#validation-errors-serial-number").text("Invalid Value");
    }
  }
}
function mapAllCoins() {
  $.ajax({
    type: "GET",
    url: "find_last_city_for_each",
    success: update_entries
  });
}

$(document).on("submit", "form", function (e) {
    $("#validation-errors").hide();
    var valuesToSubmit = $(this).serialize();
    $.ajax({
        type: "POST",
        url: $(this).attr('action'), //sumbits it to the given url of the form
        data: valuesToSubmit,
        dataType: "JSON" // you want a difference between normal and ajax-calls, and json is standard
    }).success(function(json){
      refreshCities();
    }).error(function(json) {
      $("#validation-errors").show();
      $("#validation-errors").text(" - " + json.responseJSON.city[0]);
    });
    return false; // prevents normal behaviour
});
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCwDgeRGT4ZgucWWQSnlyOIo-Kbyy3gSC0&callback=initMap"
    async defer></script>

<h1>Got a Rock</h1>

      <%= form_for(@coin_entry) do |f| %>
    <div class="serial_number_container field">
      <%= label(:coins, "Enter Serial Number") %><br>
      <%= f.text_field :serial_number, :id => "coin_entry_serial_number" %>
      <span class="field" id="validation-errors-serial-number" style="display:none; color: red"></span>
    </div>

    <div>
    <div class="edit_fields section_box">    
        
        <div class="field" id="city">
          <%= f.label :city %><span class="field" id="validation-errors" style="display:none; color: red"></span><br>
          <%= f.text_field :city, class: 'location_update edit_field', :required => true%>
        </div>
        <div class="field">
          <%= f.label :state %><br>
          <%= f.text_field :state, class: 'location_update edit_field', :required => true%>
        </div>
        <div class="field">
          <%= f.label :country %><br>
          <%= f.text_field :country, class: 'edit_field' %>
        </div>
        <div class="field">
          <%= f.label(:created_at, "Date") %><br>
          <%= f.text_field :created_at, id: 'created_at_picker', class: 'edit_field' %>
        </div>
        <div class="field">
          <%= f.label(:description, "How'd You Get Your Rock? (optional)") %><br>
          <%= f.text_area :description, cols: "18", rows: "6", class: 'edit_field'  %>
        </div>
        <div class="actions">
          <%= f.submit %>
        </div>
      </div>
    <% end %>

    <div id="coin_entries" class="cities section_box">
    </div>

    <div id="map-container" class="map section_box">
      <div id="map-canvas"></div>
    </div>


      <div style="clear: both;"></div>
  </div>